name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.3

    - name: Install dependencies
      run: go mod download

    - name: Build Linux binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o builder-cli-linux .
      
    - name: Build Windows binary
      run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o builder-cli-windows.exe .

    - name: Generate changelog
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        docker run --rm -v "$(pwd)":/usr/local/src/ \
        -e CHANGELOG_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
        githubchangeloggenerator/github-changelog-generator \
        -u ${{ github.repository_owner }} \
        -p ${{ github.event.repository.name }} \
        --since-tag ${{ github.ref_name }} \
        --due-tag ${{ github.ref_name }} \
        --unreleased-label ${{ github.ref_name }} \
        --no-issues \
        -o /usr/local/src/CHANGELOG.md
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          body_path: CHANGELOG.md
          tag_name: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

    - name: Upload Linux binary to release
      uses: actions/upload-release-asset@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builder-cli-linux
        asset_name: builder-cli-linux
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows binary to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builder-cli-windows.exe
        asset_name: builder-cli-windows.exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
